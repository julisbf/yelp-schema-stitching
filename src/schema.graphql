# import User, Business, Location, Coordinates, Categories, Loving, Watching from "./generated/prisma.graphql"
# import Business, Businesses, search from "./generated/yelp.graphql"
type Query {
  """
  Retrieve current user data
  """
  me: User
  """
  Search a specific business in Resto DB
  """
  business(id: String!): Business! #Resto Api
  """
  Bring all restaurants saved in Resto DB
  """
  businesses: [Business!]! #Resto Api
  """
  Total number of restaurant the current user is loving
  """
  totalLovingByCurrentUser: LovingConnection

  """
  Total number of restaurant the current user is watching
  """
  totalWatchingByCurrentUser: WatchingConnection

  """
  Total number of people loving a specific restaurant
  """
  totalLovingBusiness(placeId: String!): LovingConnection

  """
  Total number of people watching a specific restaurant
  """
  totalWatchingBusiness(placeId: String!): WatchingConnection
  """
  Search businesses using Yelp API
  """
  searchFromYelp(
    term: String!
    location: String!
    price: String
    limit: Int = 5
  ): Businesses # Yelp Api
  """
  Search a specific business using Yelp API
  """
  businessFromYelp(id: String!): Business! # Yelp Api
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  signout: SuccessMessage
  createBusiness(
    yelpId: String!
    name: String!
    price: String
    photos: String
    location: LocationCreateOneWithoutBusinessInput
    coordinates: CoordinatesCreateOneWithoutBusinessInput
    categories: CategoryCreateManyWithoutBusinessInput
  ): Business!
  updateBusiness(
    id: ID!
    yelpId: String
    name: String
    price: String
    photos: String
    location: LocationUpdateOneWithoutBusinessInput
    coordinates: CoordinatesUpdateOneWithoutBusinessInput
    categories: CategoryUpdateManyWithoutBusinessInput
  ): Business!
  deleteBusiness(placeId: ID!): Business
  addLoveToBusiness(placeId: ID!): Loving!
  removeLoveToBusiness(placeId: ID!): Loving!
  addWatchToBusiness(placeId: ID!): Watching!
  removeWatchToBusiness(placeId: ID!): Watching!
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  name: String!
  loving: [Loving!]!
  watching: [Watching!]!
}

# type Businesses {
#   business: [Business!]!
#   total: Int
# }

type SuccessMessage {
  message: String
}
