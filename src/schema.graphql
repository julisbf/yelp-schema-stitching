# import User, Business, Location, Coordinates, Categories, Loving, Watching from "./generated/prisma.graphql"
# import Business, Businesses, search from "./generated/yelp.graphql"
type Query {
  """
  Retrieve current user data
  """
  me: User
  """
  Retrieve all users data
  """
  users(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User]!
  """
  Search a specific business in Resto DB
  """
  business(id: String!): Business! #Resto Api
  """
  Bring all restaurants saved in Resto DB
  """
  businesses(
    where: BusinessWhereInput
    orderBy: BusinessOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Business]! #Resto Api
  """
  Total number of restaurant the current user is loving
  """
  totalLovingByCurrentUser: LovingConnection

  """
  Total number of restaurant the current user is watching
  """
  totalWatchingByCurrentUser: WatchingConnection

  """
  Total number of people loving a specific restaurant
  """
  totalLovingBusiness(placeId: String!): LovingConnection

  """
  Total number of people watching a specific restaurant
  """
  totalWatchingBusiness(placeId: String!): WatchingConnection
  """
  Search businesses using Yelp API
  """
  searchFromYelp(
    term: String!
    location: String!
    price: String
    limit: Int = 5
  ): Businesses # Yelp Api
  """
  Search a specific business using Yelp API
  """
  businessFromYelp(id: String!): Business! # Yelp Api
}

type Mutation {
  """
  Create a new user
  """
  signup(email: String!, password: String!, name: String!): AuthPayload!
  """
  Sign In an existing user
  """
  login(email: String!, password: String!): AuthPayload!
  """
   Disconnect the current user
  """
  signout: SuccessMessage
  """
   Create a new business in Resto DB
  """
  createBusiness(data: BusinessCreateInput!): Business!
  """
   Update a specific business
  """
  updateBusiness(
    data: BusinessUpdateInput
    where: BusinessWhereUniqueInput!
  ): Business!
  """
   Delete an existing business. Only ADMIN role can do it
  """
  deleteBusiness(placeId: ID!): Business
  """
   Add a business to current user favorites list
  """
  addLoveToBusiness(placeId: ID!): Loving!
  """
   Remove a specific business from current user favorites list
  """
  removeLoveToBusiness(placeId: ID!): Loving!
  """
   Add a business from current user wishlist
  """
  addWatchToBusiness(placeId: ID!): Watching!
  """
   Remove a specific business from current user wishlist
  """
  removeWatchToBusiness(placeId: ID!): Watching!
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  name: String!
  loving: [Loving!]!
  watching: [Watching!]!
}

type SuccessMessage {
  message: String
}
